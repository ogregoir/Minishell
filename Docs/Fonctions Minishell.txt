READLINE :
readline : Lit une ligne du terminal et la renvoie. La ligne renvoyée est malloc elle doit donc être libérée
Le dernier \n de la ligne est supprimé, une ligne vide renvoie NULL
La ligne stocker par readline est stocké dans rl_line_buffer
Pour installer readline : brew install readline


add_history  : Permet de stocker un char* dans l'historique
clear_history : Nettoie l'historique de toutes ces entrées
rl_on_new_line : Permet de prévenir que nous sommes dans une nouvelle ligne
rl_replace_line : Replace rl_line_buffer, avec le texte en premier argument
rl_redisplay : Change ce qui est affiché sur l'écran par rapport au rl_line_buffer


                        Les SIGNAUX :
signal : permet d'envoyer un message à destination d'un processus pour l'informer que quelque chose vient de survenir ou pour lui demander de réaliser une tâche particulière.


sigaction : sert à modifier l'action effectuée par un processus à la réception d'un signal spécifique


sigemptyset : initialise le signal "set" et le vide


sigaddset : permet de rajouter "signum" au "set"


Les objets de type sigset_t doivent être initialisé par sigemetyset avant d'être envoyé à sigaddset


kill : permet d'envoyer un signal à n'importe quel processus indiquer dans pid
si pid positif, le signal est envoyé au processus indiqué par le pid
si pid est 0, le signal est envoyé à tous les processus
si pid est -1, alors le signal est envoyé à tous les processus pour a la permission d'envoyer des signaux
si pid < -1, alors le signal est envoyé à tous les processus groupe avec le même pid
Sig 0, n'envoie aucun signal, mais permet de tester les conditions d'erreurs


                        STAT :
stat : revois des infos à propos du fichier passer dans path
lstat : est identique a stat, mais utilise un lien symbolique
fstat : est identique a stat, mais utilise un fd a la place du path
Ces 3 fonctions renvoient ces infos dans une structure stat
        struct stat {
    dev_t     st_dev;      /* ID du périphérique contenant le fichier */
    ino_t     st_ino;      /* Numéro inœud */
    mode_t    st_mode;     /* Protection */
    nlink_t   st_nlink;    /* Nb liens matériels */
    uid_t     st_uid;      /* UID propriétaire */
    gid_t     st_gid;      /* GID propriétaire */
    dev_t     st_rdev;     /* ID périphérique (si fichier spécial) */
    off_t     st_size;     /* Taille totale en octets */
    blksize_t st_blksize;  /* Taille de bloc pour E/S */
    blkcnt_t  st_blocks;   /* Nombre de blocs alloués */
    time_t    st_atime;    /* Heure dernier accès */
    time_t    st_mtime;    /* Heure dernière modification */
    time_t    st_ctime;    /* Heure dernier changement état */
};



                        Flux/Répertoire
opendir : ouvre un flux répertoire et renvoi un pointeur vers ce flux
(le flux est un canal qui sert à envoyer/recevoir des données comme stdin et stdout)


readdir : renvoie un pointeur sur une structure avec des infos sur un flux pointé par dir


closedir : ferme le flux associé a dir, a utiliser après opendir, une fois qu'on a plus besoin du flux ( a testé mais j’imagine que c’est similaire à un free) 


la structure “dirent” possède ces infos : 
struct dirent {
    ino_t          d_ino;       /* numéro d'inœud */
    off_t          d_off;       /* décalage jusqu'à la dirent suivante */
    unsigned short d_reclen;    /* longueur de cet enregistrement */
    unsigned char  d_type;      /* type du fichier */
    char           d_name[256]; /* nom du fichier */
};






                        Les terminaux :
tcsetattr : permet d'établir une interface générale pour les terminaux
Récupère les paramètres de fd et les stocke dans la structure terminos_p


tcsetattr : définis les paramètres du terminal, en lisant la structure termios_p
Les fonctions de terminal un argument vers une structure "termios_p" avec ces variables :
                tcflag_t c_iflag;      /* modes d'entrée */
                tcflag_t c_oflag;      /* modes de sortie */
                tcflag_t c_cflag;      /* modes de contrôle */
                tcflag_t c_lflag;      /* modes locaux */
                cc_t     c_cc[NCCS];   /* caractères spéciaux */






                        Fonctions diverses :
wait3 / wait 4 : similaire à wait_pid mais renvoie des informations sur l'utilisation des ressources stocker dans la structure rusage (qui faut mettre en dernier argument) (Mais d'après ce que j’ai vu ces fonctions n’ont pas trop d'intérêt vu que waitpid est similaire)


getcwd : permet d'obtenir le chemin absolu du répertoire de travail dans la chaîne pointée par buf
	Utilisation :
		char *str;
		str = malloc(sizeof(str) * buf_size);
		getcwd(str, buf_size);
		printf(str); /* /Users/rgreiner/Desktop/Minishell */


chdir : remplace le répertoire de travail par celui indique dans path (sers pour cd)
Permet de ce deplacer pendant l'execution du porgramme
	Utilisation : 
		getcwd(str, 100);
		ft_putstr_fd(str, 0); /* /Users/rgreiner/Desktop/Minishell */
		chdir("/Users/rgreiner/");
		printf("\n");
		getcwd(str, 100); 
		ft_putstr_fd(str, 0);  /* /Users/rgreiner */


unlink : détruit un nom dans le système de fichiers et donc supprime ce fichier
strerror : renvoi la chaîne de caractère associée a un code erreur, strerror renvoi un char*, mais ne malloc pas
        Utilisation 
                unlink(“Nom du fichier”);


isatty : permet de vérifier sur un descripteur de fichier est connecté à un terminal ( renvoie 1 si oui, aussi non 0)


ttyname : renvoie un pointeur sur le chemin d'accès du descripteur de fichier (fd)


ttylot : renvoie la position de l'entrée du terminal en cours dans un fichier


getenv : permet de récupérer le contenu d'une variable d'environnement (la fonction getenv prend en argument le nom de la variable d'env)
Renvoie la variable d'env dans une chaîne de caractères qui ne faut pas free
(à utiliser pour imprimer les variables d'environnement quand on fait la commande env et export aussi, j'imagine)


ioctl : Pas clair, chercher plus d'infos/regarder des vidéos


tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs : regarder des vidéos pour mieux comprendre